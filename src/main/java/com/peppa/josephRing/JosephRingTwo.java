package com.peppa.josephRing;

/**
 * 题目:
 * 给定一个可能有环也可能无环的单链表，头结点 head1 和 head2。
 * 请实现一个函数,如果两个链表相交，请返回相交的 第一个节点 。如果不相交，返回 null
 * 【要求】
 * 如果两个链表的长度之和为 N ，时间复杂度请达到 O(N) , 额外空间复杂度请达到 O(1) 。
 */
public class JosephRingTwo {
    /*
    关于思路一:
        还是采用容器的方法,在之前将其中一个链表遍历完，再去遍历另一条链表，如果两个链表相交。
        必定在容器当中存在该节点，而该节点就是入环节点。
        代码与之前的一样
     */
    /*
    关于思路二:
        需要分三种情况进行研究
        第一种，两个链表的节点都是无环;
            两个链表都是无环的分别遍历两个链表,直到最后一个节点。如果两个链表是相交的,那么直到最后一个节点,两个链表的最后的节点必定指向的是同一个节点。
            确定相交的节点,则只需要确定两个链表的长度，让两个链表中的长链表先走两个链表的差值步,让后在此基础上同时遍历两个链表，直到两个链表的指针指向同一个节点，该节点就是相交节点。
        第二种，一个链表有环，一个链表无环;
            这种情况下，两个链表永远不可能相交。一个已经形成环，另一个是单链表。
        第三种，两个链表都是有环存在的;
            两个链表都存在环则表示
     */
}
